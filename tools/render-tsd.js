#!/usr/bin/env node
/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @fileoverview Renders a .d.ts file based on Chrome bundle generated from the 'prepare' script.
 */


import getStdin from 'get-stdin';
import * as chromeTypes from '../types/chrome.js';
import * as fs from 'fs';
import mri from 'mri';
import { RenderContext } from './lib/render-context.js';
import { FeatureQuery } from './lib/feature-query.js';
import log from 'fancy-log';
import { RenderOverride } from './override.js';


async function run() {
  const argv = mri(process.argv.slice(2), {
    boolean: ['help', 'all'],
    alias: {
      'symbols': ['s'],
      'help': ['h'],
      'all': ['a'],
    },
    unknown: (v) => {
      throw new Error(`unexpected flag: ${v}`);
    },
  });

  if (argv.help || argv._.length !== 0) {
    console.warn(`Usage: cat apis.json | render-tsd.js > out.d.ts

Prepares the TypeScript Definitions file containing Chrome APIs based on the
JSON payload generated by "prepare.js". Renders the generated file to stdout.

Options:
  -a, --all            generate all (including Platform Apps), not just MV3+
  -s, --symbols        path to symbol history file from prepare-history.js
`);
    process.exit(0);
  }

  /** @type {chromeTypes.HistoricSymbolsPayload?} */
  let history = null;

  if (argv.symbols) {
    history = JSON.parse(fs.readFileSync(argv.symbols, 'utf-8'));
  }

  const renderAt = new Date();

  /** @type {chromeTypes.ProcessedAPIData} */
  const o = JSON.parse(await getStdin());

  /** @type {string[]} */
  const renderParts = [];

  const versionSuffix = o.version ? ` (${o.version.version})` : '';
  renderParts.push(`/**
 * Copyright ${renderAt.getFullYear()} Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated on ${renderAt}
// Built at ${o.definitionsRevision}${versionSuffix}`);

  /** @type {FeatureQuery} */
  let featureQuery;

  if (argv.all) {
    // We include all APIs, MV2 and MV3 etc, to render on the site.
    featureQuery = new FeatureQuery(o.feature);

    renderParts.push(`// Includes all types, including MV2 + Platform Apps APIs.`);

  } else {
    featureQuery = new FeatureQueryModern(o.feature);

    renderParts.push(`// Includes MV3+ APIs only.`);

    const extraMV3File = new URL('../content/extra-mv3.d.ts', import.meta.url);
    renderParts.push(fs.readFileSync(extraMV3File, 'utf-8'));
  }

  const preambleFile = new URL('../content/preamble.d.ts', import.meta.url);
  renderParts.push(fs.readFileSync(preambleFile, 'utf-8'));

  const renderOverride = new RenderOverride(o.api, featureQuery, history);
  const renderContext = new RenderContext(renderOverride);

  // Render the .d.ts.
  const r = renderContext.renderAll(Object.values(o.api));
  renderParts.push(r);

  const out = Buffer.from(renderParts.join('\n\n'));
  log.warn(`Built ${argv.all ? 'all' : 'MV3+'} types, generated ${out.length} bytes of .d.ts`);

  process.stdout.write(out);
}


class FeatureQueryModern extends FeatureQuery {

  /**
   * @param {chromeTypes.FeatureSpec} f
   * @return {boolean}
   */
  filter(f) {
    // Don't show anything that maxes out before MV3.
    if (f.max_manifest_version && f.max_manifest_version < 3) {
      return false;
    }

    // Remove non-extension APIs.
    if (f.extension_types && !f.extension_types.includes('extension')) {
      return false;
    }

    return super.filter(f);
  }

}


await run();
